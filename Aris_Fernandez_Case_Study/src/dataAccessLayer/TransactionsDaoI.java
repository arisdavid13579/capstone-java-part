package dataAccessLayer;

import java.util.List;

import exceptions.CustomExceptions.NoResultsFoundException;
import transferObjects.Transaction;
import transferObjects.TransactionList;

/**
 *  Defines abstractly the methods needed to handle transaction data.
 *
 * @author Aris Fernandez
 */
public interface TransactionsDaoI extends TransactionsQueries {

	/**
	 * Generates a list of transactions in a given zip code during a given month and
	 * year.
	 *
	 * @param zipcode     The postal code of the area for which the transaction list
	 *                    is to be obtained.
	 * @param duringMonth The month during which transactions occur.
	 * @param duringYear  The year during which the transactions occur.
	 * @return A TransactionList object which contains all the transactions found
	 *         with the given information.
	 * @throws NoResultsFoundException If no results are found with the given
	 *                                 information.
	 */
	TransactionList getTransactionsByZipcode(String zipcode, int duringMonth, int duringYear)
			throws NoResultsFoundException;

	/**
	 * Finds the count of transactions of occurring in a given State as well as the
	 * total amount of money generated by transactions in that location.
	 *
	 * @param state The state in which the transactions occur.
	 * @return A transaction object with only the value and count fields set. In
	 *         this case, value is the sum of the value of all relevant transactions
	 *         and the count is the number of relevant transactions. All other
	 *         fields are set to null or not initialized.
	 * @throws NoResultsFoundException If no transactions with the given information
	 *                                 are found in the database.
	 */
	Transaction getTransactionsByState(String state) throws NoResultsFoundException;

	/**
	 ** Finds the count of transactions of a given type as well as the total amount
	 * of money generated by that type of transaction.
	 *
	 * @param type The type of transaction to look for in the database.
	 * @return A transaction object with only the value and count fields set. In
	 *         this case, value is the sum of the value of all relevant transactions
	 *         and the count is the number of relevant transactions. All other
	 *         fields are set to null or not initialized.
	 * @throws NoResultsFoundException If no transactions with the given information
	 *                                 are found in the database.
	 */
	Transaction getTransactionsByType(String type) throws NoResultsFoundException;

	/**
	 * Queries the database to get a list of the transaction types currently
	 * available in the database.
	 *
	 * @return A list of unique transaction types currently present in the database.
	 */
	List<String> getAllowedTransactionTypes();
}
